// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    asset         Assest[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Assest {
    id         String       @id @default(cuid())
    gold       Gold?
    stock      Stocks[]
    mutalfunds MutalFunds[]
    cash       Cash?
    User       User         @relation(fields: [userId], references: [id])
    userId     String       @unique
}

model Gold {
    id String @id @default(cuid())
    quantity     String
    invested_Amt String
    current_Amt  String
    asset  Assest @relation(fields: [goldId], references: [id])
    goldId String @unique
}

model Stocks {
    id String @id @default(cuid())
    Name          String
    Ticker        String
    quantity      String
    average_price String
    current_price String
    marketcap     String
    sector        String
    asset    Assest @relation(fields: [stocksId], references: [id])
    stocksId String @unique

    @@unique([Ticker])
}

model MutalFunds {
    id String @id @default(cuid())
    Name          String
    Ticker        String
    quantity      String
    average_price String
    current_price String
    asset        Assest @relation(fields: [mutalFundsId], references: [id])
    mutalFundsId String @unique

    @@unique([Ticker])
}

model Cash {
    id String @id @default(cuid())
    Amount      String
    current_Amt String
    asset  Assest @relation(fields: [cashId], references: [id])
    cashId String @unique
}
